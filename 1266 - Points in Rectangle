import java.io.*;
import java.util.*;

public class PointsInRectangle {
    static class Reader {
        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Reader() {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public Reader(String file_name) throws IOException {
            din = new DataInputStream(new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public String nextLine() throws IOException {
            byte[] buf = new byte[1000000]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (c == '\n')
                    break;
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }

        public String next() throws IOException {
            byte[] buf = new byte[64]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (c == ' ')
                    break;
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }

        public int nextInt() throws IOException {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (neg)
                return -ret;
            return ret;
        }

        public long nextLong() throws IOException {
            long ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');
            if (neg)
                return -ret;
            return ret;
        }

        public double nextDouble() throws IOException {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();

            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (c == '.') {
                while ((c = read()) >= '0' && c <= '9') {
                    ret += (c - '0') / (div *= 10);
                }
            }

            if (neg)
                return -ret;
            return ret;
        }

        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }

        private byte read() throws IOException {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }

        public void close() throws IOException {
            if (din == null)
                return;
            din.close();
        }
    }
    static int [][] tree=  new int[1002][1002];
    public static void main(String args[]) throws IOException {
        Reader ob = new Reader();
        PrintWriter p = new PrintWriter(System.out);
       int T = ob.nextInt();
       int TC =0;
       while(T-->0){
           p.println("Case "+(++TC)+":");
        int q = ob.nextInt();
        while(q-->0){
            int action = ob.nextInt();
            if(action==0){
                int x = ob.nextInt();int y = ob.nextInt();
                int point = query(x, y, x, y);
                if(point==0){
                    update(x, y, 1);
                }
            }else{
                int x1 = ob.nextInt();
                int y1 = ob.nextInt();int x2 = ob.nextInt(); int y2 = ob.nextInt();
                int ans = query(x1, y1, x2, y2);
                p.println(ans);
            }
        }
        for(int i=0;i<=1001;i++){
            for(int j=0;j<=1001;j++){
                tree[i][j] = 0;
            }
        }
       }
        p.close();
    }
    static int query(int x1,int y1,int x2,int y2){
        int ans = getSum( x2, y2) - 
                      getSum( x2, y1 - 1) -  
                      getSum( x1 - 1, y2) + 
                      getSum( x1 - 1, y1 - 1);  
        return ans;
    }
   static  int getSum(int x,int y){
        int sum = 0;
        int y1 =0;
        x++;y++;
        while(x>0){
            y1 = y;
            while(y1>0){
                sum+=tree[x][y1];
               y1-=lsb(y1);
            }
            x-=(lsb(x));
        }
        return sum;
    }
static     void  update(int x,int y,int val){
        x++;y++;
        int y1 =0;
        while(x<=1001){
            y1 = y;
            while(y1<=1001){
                tree[x][y1]+=val;
                y1+=(y1&(-y1));
            }
            x+=(x&(-x));
        }
    }
 static    int lsb(int i){return i&-i;}
}
